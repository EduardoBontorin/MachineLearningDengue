// <auto-generated />
using Dengue.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dengue.Migrations
{
    [DbContext(typeof(DengueDataContext))]
    [Migration("20240621174315_v8")]
    partial class v8
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dengue.Models.Ano", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnoReferencia")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Ano");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AnoReferencia" }, "IX_Ano_AnoReferencia");

                    b.ToTable("Ano", (string)null);
                });

            modelBuilder.Entity("Dengue.Models.Cidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("AnoId");

                    b.ToTable("Cidades");
                });

            modelBuilder.Entity("Dengue.Models.Clima", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ano")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hora")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Precipitacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TempMax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TempMin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Umidade")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Climas");
                });

            modelBuilder.Entity("Dengue.Models.ClimaArrumado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ano")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hora")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Precipitacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TempMax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TempMin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Umidade")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClimasC");
                });

            modelBuilder.Entity("Dengue.Models.Semana", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CidadeId")
                        .HasColumnType("int");

                    b.Property<string>("Notificacoes")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Sequencial")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CidadeId");

                    b.HasIndex(new[] { "Sequencial" }, "IX_Semana_Sequencial");

                    b.ToTable("Semanas");
                });

            modelBuilder.Entity("Dengue.Models.SemanaCLima", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ano")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TemperaturaMaxima")
                        .HasColumnType("float");

                    b.Property<double>("TemperaturaMinima")
                        .HasColumnType("float");

                    b.Property<double>("TotalPrecipitacao")
                        .HasColumnType("float");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ClimasSemana");
                });

            modelBuilder.Entity("Dengue.Models.Cidade", b =>
                {
                    b.HasOne("Dengue.Models.Ano", "Ano")
                        .WithMany("Cidades")
                        .HasForeignKey("AnoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Cidade_Ano");

                    b.Navigation("Ano");
                });

            modelBuilder.Entity("Dengue.Models.Semana", b =>
                {
                    b.HasOne("Dengue.Models.Cidade", "Cidade")
                        .WithMany("Semanas")
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Semana_Cidade");

                    b.Navigation("Cidade");
                });

            modelBuilder.Entity("Dengue.Models.Ano", b =>
                {
                    b.Navigation("Cidades");
                });

            modelBuilder.Entity("Dengue.Models.Cidade", b =>
                {
                    b.Navigation("Semanas");
                });
#pragma warning restore 612, 618
        }
    }
}
