import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline
from sklearn.model_selection import GridSearchCV, train_test_split

# Carregar os dados
dataTreino = pd.read_csv('dados.csv')
dataTeste = pd.read_csv('Teste.csv')
treino_x = dataTreino[['tempMin', 'TempMax', 'Chuva', '1','4']]
treino_y = dataTreino['3']

teste_x = dataTeste[['tempMin', 'TempMax', 'Chuva', '1','4']]
teste_y = dataTeste['3']

SEED = 5
np.random.seed(SEED)

# Dividir os dados em treino e teste sem estratificação


# Aplicar a escala aos dados de treino e teste para X


# Aplicar a escala aos dados de treino e teste para y


# Definir o pipeline de transformação e o modelo
pipeline = make_pipeline(SVR())

# Definir os parâmetros para o GridSearch
param_grid = {
    'svr__C': [0.1, 1, 10, 100],
    'svr__gamma': ['scale', 'auto'],
    'svr__kernel': ['linear', 'poly', 'rbf', 'sigmoid']
}

# Realizar o GridSearchCV para encontrar os melhores parâmetros
grid_search = GridSearchCV(pipeline, param_grid, cv=5, scoring='neg_mean_squared_error')
grid_search.fit(treino_x, treino_y)

# Imprimir os melhores parâmetros encontrados
print("Melhores parâmetros encontrados:", grid_search.best_params_)

# Treinar o modelo com os melhores parâmetros
modelo = grid_search.best_estimator_
modelo.fit(treino_x, treino_y)

# Fazer previsões
previsoes_escaladas = modelo.predict(teste_x)

previsoes = modelo.predict(teste_x)
previsoes = np.maximum(previsoes, 0)

# Desfazer a escala nas previsões


# Aplicar transformação para garantir que as previsões sejam não negativas
previsoes = np.maximum(previsoes, 0)

# Desfazer a escala nos valores reais de teste


# Calcular o erro médio quadrático (mean squared error) como métrica de avaliação
mse = mean_squared_error(teste_y_original, previsoes)
print("Erro Médio Quadrático:", mse)

# Plotar os valores reais vs. previstos
plt.figure(figsize=(10, 5))
plt.plot(teste_y_original, label='Casos Reais')
plt.plot(previsoes, label='Casos Previstos')
plt.xlabel('Amostras')
plt.ylabel('Número de Casos')
plt.legend()
plt.show()
